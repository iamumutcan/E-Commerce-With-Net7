@using Blazored.LocalStorage;
@using E_Commerce_Client.Service.IService;
@using E_Commerce_Common;
@using E_Commerce_Models;

@inject ICategoryService _categoryService
@inject ISyncLocalStorageService _localStorageService
@implements IDisposable
@inject ICartService _cartService




<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/" style="color:orange">Adventures</a>
        @foreach(var item in Categories)
        {
            <a class="navbar-brand" href="/category/products/@item.Id">@item.Name</a>

        }
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">

                <li class="nav-item p-0">
                    <NavLink class="nav-link" href="/cart">
                        <span  class="p-2">
                            <i class="bi bi-cart"></i>(@GetCartCount())
                        </span>
                    </NavLink>
                </li>
            </ul>
           
        </div>
    </div>
</nav>

@code {
    public IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private List<ShoppingCart> ShoppingCarts {get; set;} = new List<ShoppingCart>();
    protected override async Task OnInitializedAsync()
    {
        Categories = await _categoryService.GetAll();
        _cartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _cartService.OnChange -= StateHasChanged;
    }

    private int GetCartCount()
    {
        var result = _localStorageService.GetItem<List<ShoppingCart>>(Keys.ShopppingCart);
        return result == null ? 0 : result.Count;
    }
}